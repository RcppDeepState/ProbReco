% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sga.R
\name{scoreopt}
\alias{scoreopt}
\title{Score optimisation by Stochastic Gradient Ascent}
\usage{
scoreopt(data, prob, S, Ginit = c(rep(0, ncol(S)), as.vector(solve(t(S)
  \%*\% S, t(S)))), control = list(), trace = F)
}
\arguments{
\item{data}{Past data realisations as vectors in a list.  Each list element corresponds to a period of training data.}

\item{prob}{List of functions to simulate from probabilistic forecasts.  Each list element corresponds to a period of training data. The output of each function should be a matrix.}

\item{S}{Matrix encoding linear constraints.}

\item{Ginit}{Initial values of reconciliation parameters \eqn{a} and \eqn{G} where \eqn{\tilde{y}=S(a+G\hat{y})}.  The first \eqn{m} elements correspond to translation vector \eqn{a}, while the remaining elements correspond to the matrix \eqn{G} where the elements are filled in column-major order. Default is least squares.}

\item{control}{Tuning parameters for SGA. See \code{\link[ProbReco]{scoreopt.control}} for more details}

\item{trace}{Flag to keep details of SGA.  Default is FALSE}
}
\value{
Optimised reconciliation parameters.
\item{a}{Translation vector for reconciliation.}
\item{G}{Reconciliation matrix (G).}
\item{val}{The estimated optimal total score.}
\item{Gvec_store}{A matrix of Gvec (a and G vectorised) where each column corresponds to an iterate of SGA.}
\item{val_store}{A vector where each element gives the value of the objective function for each iterate of SGA.}
}
\description{
Function find a reconciliation matrix that optimises total score 
using training data.  Stochastic gradient ascent is used for optimisation
with gradients found using automatic differentiation.
}
\examples{
#Use purr library to setup
library(purrr)
#Define S matrix
S<-matrix(c(1,1,1,0,0,1),3,2, byrow = TRUE)
#Set data (only 10 training observations used for speed)
data<-map(1:10,function(i){S\%*\%(c(1,1)+rnorm(2))})
#Set list of functions to generate 50 iterates from probabilistic forecast
prob<-map(1:10,function(i){f<-function(){matrix(rnorm(3*50),3,50)}})
#Find weights by SGA (will take a few seconds)
out<-scoreopt(data,prob,S)
}
\seealso{
Other ProbReco functions: \code{\link{scoreopt.control}},
  \code{\link{total_score}}
}
\concept{ProbReco functions}
